name: 自动部署服务到k8s
on:
  push:
    branches: [ master ]  # 触发分支为master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      # 步骤1：登录镜像仓库
      - name: 登录镜像仓库
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}

      # 后端编译打包（生成JAR包）
      - name: 配置Java环境（用于Maven编译）
        uses: actions/setup-java@v4
        with:
          java-version: '17'  # 与Spring Boot项目Java版本一致
          distribution: 'temurin'
          cache: maven

      - name: 用Maven编译后端代码生成JAR包
        run: mvn clean package -DskipTests
        working-directory: ./backend  # 后端代码目录

      # 步骤2：构建并推送后端镜像
      - name: 构建后端镜像
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKER_REGISTRY_USER }}/lucky-sms-backend:${{ github.sha }}
            ${{ secrets.DOCKER_REGISTRY_USER }}/lucky-sms-backend:latest

      # 前端编译打包（生成dist目录）
      - name: 配置Node环境（用于前端编译）
        uses: actions/setup-node@v4
        with:
          node-version: '22'  # 改为与本地一致的v22
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json

      - name: 安装前端依赖并构建生成dist目录
        run: |
          npm install  # 安装依赖
          npm run build  # 执行打包命令（生成dist目录）
        working-directory: ./frontend  # 前端代码目录（含package.json）

      # 步骤3：构建并推送前端镜像（此时dist目录已生成）
      - name: 构建前端镜像
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_REGISTRY_USER }}/lucky-sms-frontend:${{ github.sha }}
            ${{ secrets.DOCKER_REGISTRY_USER }}/lucky-sms-frontend:latest

      # 步骤4：配置kubectl（新增创建目录的命令）
      - name: 配置kubectl
        run: |
          mkdir -p ~/.kube  # 先创建.kube目录，避免文件写入失败
          echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config  # 再写入配置文件
          kubectl get nodes  # 验证配置是否生效

      # 步骤5：部署MySQL相关资源
      - name: 部署MySQL依赖
        run: |
          kubectl apply -f k8s/mysql-init-configmap.yaml
          kubectl apply -f k8s/mysql.yaml

      # 步骤6：更新后端部署
      - name: 部署后端
        run: |
          kubectl set image deployment/backend backend=${{ secrets.DOCKER_REGISTRY_USER }}/lucky-sms-backend:${{ github.sha }}
          kubectl rollout status deployment/backend

      # 步骤7：更新前端部署
      - name: 部署前端
        run: |
          kubectl set image deployment/frontend frontend=${{ secrets.DOCKER_REGISTRY_USER }}/lucky-sms-frontend:${{ github.sha }}
          kubectl rollout status deployment/frontend